on:
  workflow_dispatch:

name: 'hotfix_deployment'

defaults:
  run:
    working-directory: ./

env:  
  ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY }}
  ENVIRONMENT_NAME: test

jobs:

  hotfix_deployment:
    name: 'hotfix_deployment'
    runs-on: ubuntu-latest
    environment:
      name: test
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - id: set-version-number
      run: |
        TEXT=$(cat ./version.txt)
        echo "version=${TEXT//'%'/'%25'}" >> $GITHUB_OUTPUT

    - id: echo-version
      run: |
        echo ${{ steps.set-version-number.outputs.version }} 
    
    - name: Check if Image exists in Amazon ECR
      id: check-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }} 
        IMAGE_TAG: ${{ steps.set-version-number.outputs.version }}
      run: |
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        if docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG >/dev/null; then
            echo "The image $IMAGE_TAG already exists in the $ECR_REPOSITORY Repository"
            exit 1
        else
            echo "Build and push docker image with that tag $IMAGE_TAG "
        fi
        
    - name: Build, tag, and push base image to Amazon ECR
      id: build-base-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_BASE_REPOSITORY_NAME }}
      run: |
        echo "base_image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-version-number.outputs.version }}" >> $GITHUB_OUTPUT
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.set-version-number.outputs.version }} -f ./docker/production/django_base/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags     
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
      run: |
        docker build -t ${{ steps.check-image.outputs.image }} -f ./docker/production/django/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags

    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}   

    - name: Update celeryflower Task
      uses: "./.github/workflows/templates/update_task_def"
      with:
        service: celeryflower
        container: celeryflower
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update celeryworker Task
      uses: "./.github/workflows/templates/update_task_def"
      with:
        service: celeryworker
        container: celeryworker
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update celerybeat Task
      uses: "./.github/workflows/templates/update_task_def"
      with:
        service: celerybeat
        container: celerybeat
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update frontend Task
      uses: "./.github/workflows/templates/update_task_def"
      with:
        service: frontend
        container: frontend
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update api_frontend Task
      uses: "./.github/workflows/templates/update_task_def"
      with:
        service: api_frontend
        container: frontend
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update api_frontend_internal Task
      uses: "./.github/workflows/templates/update_task_def"
      with:
        service: api_frontend_internal
        container: frontend
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update pg_migration
      uses: "./.github/workflows/templates/register_task_def"
      with:
        service: pg_migration
        container: db-migrate
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Update pg_superuser
      uses: "./.github/workflows/templates/register_task_def"
      with:
        service: pg_superuser
        container: pg-superuser
        environment: ${{ env.ENVIRONMENT_NAME }}
        image_id: ${{ steps.check-image.outputs.image }}

    - name: Run pg migration 
      uses: "./.github/workflows/templates/run_pg_migration_task"
      with:
        subnets: ${{ secrets.SUBNETS }}
        security_groups: ${{ secrets.SECURITY_GROUPS }}
        environment: ${{ env.ENVIRONMENT_NAME }}
        
    - name: Check for service stability 
      uses: oryanmoshe/ecs-wait-action@v1.3
      with:
        ecs-cluster: bodds-${{ env.ENVIRONMENT_NAME }}
        ecs-services: '["celeryflower", "celeryworker", "celerybeat", "frontend", "api_frontend", "api_frontend_internal" ]'
        verbose: true

    - name: Invoke Lambda Function
      shell: bash
      run: |
        aws lambda invoke \
        --function-name bodds_pg_mutate_lambda_${{ env.ENVIRONMENT_NAME }} \
        response.json
