---
name: Run Unit Test
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - dev
      - main

env:
  ECR_PYTHON_DEPENDENCIES_REPO: python_dependencies
  REGION: eu-west-2

jobs:
  configure_dependencies_container:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    if: |
      (
        github.base_ref == 'main' &&
        startsWith( github.head_ref, 'hotfix' )
      ) ||
      github.base_ref == 'dev'
    steps:
      - name: getref
        run: |
          echo ${{ github.head_ref || github.ref_name }}
          echo ${{ format('github.ref = {0}', github.ref) }}
          echo ${{ format('github.head_ref = {0}', github.head_ref) }}
          echo ${{ format('github.base_ref = {0}', github.base_ref) }}
          echo ${{ format('github.event.pull_request.head.ref = {0}', github.event.pull_request.head.ref) }}

      - name: Checkout HEAD of working branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "Check for change to HEAD of working branch"
        id: check_for_head_change
        run: |
          changed=false
          if git diff --exit-code HEAD^..HEAD docker/production/python_dependencies/Dockerfile; then
            true
          else
            changed=true
          fi
          if git diff --exit-code -I '^version =' HEAD^..HEAD pyproject.toml; then
            true
          else
            changed=true
          fi
          if git diff --exit-code -I '^version =' HEAD^..HEAD poetry.lock; then
            true
          else
            changed=true
          fi
          echo "changed=${changed}"
          echo "changed=${changed}" >> $GITHUB_OUTPUT

      - name: Checkout PR Merge HEAD
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Check for change to PR Merge HEAD"
        id: check_for_pr_change
        run: |
          changed=false
          if git diff --exit-code HEAD^..HEAD docker/production/python_dependencies/Dockerfile; then
            true
          else
            changed=true
          fi
          if git diff --exit-code -I '^version =' HEAD^..HEAD pyproject.toml; then
            true
          else
            changed=true
          fi
          if git diff --exit-code -I '^version =' HEAD^..HEAD poetry.lock; then
            true
          else
            changed=true
          fi
          echo "changed=${changed}"
          echo "changed=${changed}" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        id: login_aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "false"

      - name: Get region with underscores
        id: get_region_underscores
        run: |
          REGION_DASHES=${{ env.REGION }}
          REGION_UNDERSCORES="${REGION_DASHES//-/_}"
          echo "REGION_UNDERSCORES=${REGION_UNDERSCORES}" >> $GITHUB_OUTPUT

      - name: Sanitise branch name of HEAD branch
        id: sanitise_branch_name
        run: |
          branch=${{ github.head_ref || github.ref_name }}
          echo "branch=${branch//\//-}" | tr '[:upper:]' '[:lower:]' >> $GITHUB_OUTPUT

      - name: "Check if images with required tag exist in Amazon ECR"
        id: check_image_existence
        run: |
          echo "Checking for existence of ${{ steps.login_ecr.outputs.registry }}/${{ env.ECR_PYTHON_DEPENDENCIES_REPO }}:${{ steps.sanitise_branch_name.outputs.branch }}"
          echo "checking=true" >> $GITHUB_OUTPUT
          if docker manifest inspect ${{ steps.login_ecr.outputs.registry }}/${{ env.ECR_PYTHON_DEPENDENCIES_REPO }}:${{ steps.sanitise_branch_name.outputs.branch }} >/dev/null; then
              echo "Found ${{ steps.login_ecr.outputs.registry }}/${{ env.ECR_PYTHON_DEPENDENCIES_REPO }}:${{ steps.sanitise_branch_name.outputs.branch }}"
              echo "python_dependencies_branch_exists=true" >> $GITHUB_OUTPUT
          else
              echo "python_dependencies_branch_exists=false" >> $GITHUB_OUTPUT
          fi
          echo "Checking for existence of ${{ steps.login_ecr.outputs.registry }}/${{ env.ECR_PYTHON_DEPENDENCIES_REPO }}:dev"
          if docker manifest inspect ${{ steps.login_ecr.outputs.registry }}/${{ env.ECR_PYTHON_DEPENDENCIES_REPO }}:dev >/dev/null; then
              echo "Found ${{ steps.login_ecr.outputs.registry }}/${{ env.ECR_PYTHON_DEPENDENCIES_REPO }}:dev"
              echo "python_dependencies_dev_exists=true" >> $GITHUB_OUTPUT
          else
              echo "python_dependencies_dev_exists=false" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: |
          (
            steps.check_image_existence.outputs.python_dependencies_branch_exists == 'false' &&
            (
              steps.check_for_pr_change.outputs.changed == 'true' ||
              github.base_ref == 'main' ||
              (
                steps.check_image_existence.outputs.python_dependencies_dev_exists == 'false' &&
                github.base_ref == 'dev'
              )
            )
          ) ||
          steps.check_for_head_change.outputs.changed =='true'
        uses: docker/setup-buildx-action@v3

      - name: "Create repository if it doesn't exist"
        if: |
          (
            steps.check_image_existence.outputs.python_dependencies_branch_exists == 'false' &&
            (
              steps.check_for_pr_change.outputs.changed == 'true' ||
              github.base_ref == 'main' ||
              (
                steps.check_image_existence.outputs.python_dependencies_dev_exists == 'false' &&
                github.base_ref == 'dev'
              )
            )
          )  ||
          steps.check_for_head_change.outputs.changed =='true'
        id: create_repos
        run: |
          aws ecr create-repository --repository-name ${{ env.ECR_PYTHON_DEPENDENCIES_REPO  }} || true

      - name: Build and push Python Dependencies image
        id: build_dependencies_image
        if: |
          (
            steps.check_image_existence.outputs.python_dependencies_branch_exists == 'false' &&
            (
              steps.check_for_pr_change.outputs.changed == 'true' ||
              github.base_ref == 'main' ||
              (
                steps.check_image_existence.outputs.python_dependencies_dev_exists == 'false' &&
                github.base_ref == 'dev'
              )
            )
          )  ||
          steps.check_for_head_change.outputs.changed =='true'
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ format( '{0}/{1}:{2}', steps.login_ecr.outputs.registry, env.ECR_PYTHON_DEPENDENCIES_REPO, steps.sanitise_branch_name.outputs.branch ) }}
          file: "./docker/production/python_dependencies/Dockerfile"
          context: "."

    outputs:
      docker_username: ${{ steps.login_ecr.outputs[format('docker_username_{0}_dkr_ecr_{1}_amazonaws_com', steps.login_aws.outputs.aws-account-id, steps.get_region_underscores.outputs.REGION_UNDERSCORES)] }}
      docker_password: ${{ steps.login_ecr.outputs[format('docker_password_{0}_dkr_ecr_{1}_amazonaws_com', steps.login_aws.outputs.aws-account-id, steps.get_region_underscores.outputs.REGION_UNDERSCORES)] }}
      python_dependencies_image: ${{ format( '{0}/{1}:{2}', steps.login_ecr.outputs.registry, env.ECR_PYTHON_DEPENDENCIES_REPO, ( steps.check_for_pr_change.outputs.changed == 'false' && steps.check_for_head_change.outputs.changed == 'false' && steps.check_image_existence.outputs.python_dependencies_dev_exists == 'true' && github.base_ref == 'dev') && 'dev' || steps.sanitise_branch_name.outputs.branch ) }}

  run_unit_tests:
    if: |
      (
        github.base_ref == 'main' &&
        startsWith( github.head_ref, 'hotfix' )
      ) ||
      github.base_ref == 'dev'
    needs: configure_dependencies_container
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.configure_dependencies_container.outputs.python_dependencies_image }}
      credentials:
        username: ${{ needs.configure_dependencies_container.outputs.docker_username }}
        password: ${{ needs.configure_dependencies_container.outputs.docker_password }}
      options: --user root
      env:
        POSTGRES_HOST: postgres
        POSTGRES_PORT: 5432
        POSTGRES_DB: transit_odp
        POSTGRES_USER: transit_odp
        POSTGRES_PASSWORD: transit_odp
        USE_DOCKER: no
        DJANGO_SETTINGS_MODULE: config.settings.local
        DJANGO_PARENT_HOST: bods.local
        DJANGO_HOST_PORT: 8000
        DJANGO_HOST_SCHEME: http
        EMAIL_HOST: localhost
        REDIS_URL: redis://redis:6379/0
        CELERY_FLOWER_USER: admin
        CELERY_FLOWER_PASSWORD: admin
        CELERY_BROKER_VISIBILITY_TIMEOUT: 18000
        DJANGO_ACCOUNT_ALLOW_REGISTRATION: True
        GOV_NOTIFY_API_KEY: __change_me__
        CAVL_URL: __change_me__
        CAVL_VALIDATION_URL: __change_me__
        CAVL_CONSUMER_URL: __change_me__
        AVL_CONSUMER_API_BASE_URL: __change_me__
        AVL_PRODUCER_API_BASE_URL: __change_me__
        AVL_PRODUCER_API_KEY: __change_me__
        DATABASE_URL: postgis://transit_odp:transit_odp@postgres:5432/transit_odp
        CELERY_BROKER_URL: redis://localhost:6379
        PTI_START_DATE: 2021-04-01
        PTI_PDF_URL: https://pti.org.uk/system/files/files/TransXChange_UK_PTI_Profile_v1.1.A.pdf
        PTI_ENFORCED_DATE: 2021-08-02
        DQS_URL: __change_me__

    services:
      postgres:
        image: postgis/postgis:13-3.4
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DB: transit_odp
          POSTGRES_USER: transit_odp
          POSTGRES_PASSWORD: transit_odp
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis:3.2
        ports:
          - 6379:6379

    steps:
      - name: "Install git and github cli"
        id: install_git
        run: |
          apt update
          apt install -y git

      - name: Checkout
        uses: actions/checkout@v4

      - name: "Add dependencies"
        id: add_dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install

        # TODO: Currently passing on failed tests - remove || [ $? = 1 ] when tests are passing
      - name: "Run Tests"
        id: run_tests
        run: |
          pip install --upgrade typing-extensions
          pytest -vv --junitxml=junit_report.xml || [ $? = 1 ]

      - name: Pytest coverage comment
        if: always()
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./coverage.xml
          junitxml-path: ./junit_report.xml
          create-new-comment: true
          hide-report: true
