image: docker:18.09.7

services:
  - docker:18.09.7-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

  # Temporary pipeline build artifact
  BODS_IMAGE_NAME: "ito-transit-bodp-django"
  CURRENT_IMAGE: ${REGISTRY_ADDRESS}/${BODS_IMAGE_NAME}:$CI_COMMIT_SHA

  # Base image
  BASE_IMAGE_NAME: "ito-transit-bodp-base"
  BASE_IMAGE_URI: ${REGISTRY_ADDRESS}/${BASE_IMAGE_NAME}:latest

  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_HOST: postgres
  POSTGRES_PORT: "5432"
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

  # Store command to install Python3 into Alpine based image
  INSTALL_PYTHON:
    apk update && apk add --no-cache python3 python3-dev py3-pip py3-virtualenv &&
    pip3 install --upgrade pip setuptools &&
    ln -sf /usr/bin/pip3 /usr/bin/pip &&
    ln -sf /usr/bin/python3 /usr/bin/python

stages:
  - build
  - test
  - release

# UTILITIES

# Adds timestamps to log output. Also works with Alpine
.logging: &logging |-
  use_printf=`printf "%(true)T\n" -1 2>/dev/null` || use_printf=false
  use_awk=`awk 'BEGIN{print(strftime("true"));}'` || use_awk=false
  echo "logging: use_printf=$use_printf; use_awk=$use_awk"
  if $use_printf ; then
      logging_pipe=/tmp/$$.logging
      mkfifo $logging_pipe
      (set +x;while read -r line;do printf "[%(%Y/%m/%d %H:%M:%S)T] %s\n" -1 "$line";done) <$logging_pipe&
      exec >$logging_pipe 2>&1
      rm $logging_pipe
    elif $use_awk ; then
      logging_pipe=/tmp/$$.logging
      mkfifo $logging_pipe
      awk '{printf("[%s] %s\n",strftime("%Y/%m/%d %H:%M:%S"),$0);}' <$logging_pipe&
      exec >$logging_pipe 2>&1
      rm $logging_pipe
    else
      echo "Can't setup timestamped logging."
    fi
  echo "logging: Started."

before_script:
  - *logging
  - docker info
  - eval $INSTALL_PYTHON
  - python3 -m venv .venv
  - source .venv/bin/activate
  - pip install awscli
  - $(aws ecr get-login --no-include-email --region eu-west-1) # will pick up secret keys set in GitLab UI

# MERGE REQUESTS TASKS
# These tasks build, test and lint the code on every commit to a merge request.
# Merge requests must be used to integrate code into any of the target branches: develop, release/* and master

# Base task which ignores any changes to other components
.merge-request-task:
  only:
    refs:
      - merge_requests
    changes:
      - "**/*"
  except:
    changes:
      - docker/production/django_base/*

build-dev:
  extends: .merge-request-task
  stage: build
  script:
    - >
      docker build
      --file docker/local/django/Dockerfile
      --build-arg BASE_IMAGE=$BASE_IMAGE_URI
      --tag $CURRENT_IMAGE
      .
    #- docker build --cache-from $CONTAINER_IMAGE:db-latest --file docker/production/postgres/Dockerfile --tag $CONTAINER_IMAGE:db-$CI_COMMIT_SHA .
    - docker push $CURRENT_IMAGE

test-dev:
  extends: .merge-request-task
  stage: test
  variables:
    # Configures Django service
    DJANGO_PARENT_HOST: bods.local
    REDIS_URL: redis://redis:6379/0
    CELERY_BROKER_URL: redis://redis:6379/0
    DJANGO_SETTINGS_MODULE: config.settings.local
    EMAIL_HOST: localhost
    USE_DOCKER: "yes"
  script:
    - echo '127.0.0.1 www.bods.local data.bods.local publish.bods.local admin.bods.local' >> /etc/hosts
    - docker pull $CURRENT_IMAGE
    - export DB_ENVS="-e POSTGRES_HOST -e POSTGRES_PORT -e POSTGRES_DB -e POSTGRES_USER -e POSTGRES_PASSWORD"
    - export RUN_ENVS="-e REDIS_URL -e GOV_NOTIFY_API_KEY -e API_SITE_URL -e DJANGO_SETTINGS_MODULE -e USE_DOCKER -e DJANGO_PARENT_HOST -e DQS_URL -e CAVL_URL -e CAVL_CONSUMER_URL -e AVL_CONSUMER_API_BASE_URL"
    - docker run -d --rm --name postgres $DB_ENVS mdillon/postgis:10
    #    - docker run --rm --link=postgres $DB_ENVS $RUN_ENVS $CURRENT_IMAGE bash -c "coverage run -m pytest && coverage report -m"
    - docker run --rm --link=postgres $DB_ENVS $RUN_ENVS $CURRENT_IMAGE bash -c "pytest --cov=transit_odp --numprocesses=4 --durations=100 ."
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"

lint:
  extends: .merge-request-task
  stage: test
  image: python:3.9
  before_script:
    - *logging
    - pip install --pre black
  script:
    - black --check --config .black.toml  .

# POST-MERGE TASKS
# These tasks execute after a merge request has been tested, reviewed and merged into the target branch
# The production image is built and tag as either 'latest', 'staging' or 'stable' and released to ECR

build-prod:
  stage: build
  script:
    - >
      docker build
      --file docker/production/django/Dockerfile
      --build-arg BASE_IMAGE=$BASE_IMAGE_URI
      --tag $CURRENT_IMAGE
      .
    - docker push $CURRENT_IMAGE
  only:
    - tags
    - /^release/.*$/
    - develop

release-test:
  stage: release
  variables:
    DEVELOP_IMAGE: ${REGISTRY_ADDRESS}/${BODS_IMAGE_NAME}:latest
  script:
    - docker pull $CURRENT_IMAGE
    - docker tag $CURRENT_IMAGE $DEVELOP_IMAGE
    - docker push $DEVELOP_IMAGE
  only:
    - develop

release-staging:
  stage: release
  variables:
    STAGING_IMAGE: ${REGISTRY_ADDRESS}/${BODS_IMAGE_NAME}:staging
  script:
    - docker pull $CURRENT_IMAGE
    - docker tag $CURRENT_IMAGE $STAGING_IMAGE
    - docker push $STAGING_IMAGE
  only:
    - /^release/.*$/

release-prod:
  stage: release
  variables:
    PROD_IMAGE: ${REGISTRY_ADDRESS}/${BODS_IMAGE_NAME}:${CI_COMMIT_REF_NAME}
    STABLE_IMAGE: ${REGISTRY_ADDRESS}/${BODS_IMAGE_NAME}:stable
  script:
    - docker pull $CURRENT_IMAGE
    - docker tag $CURRENT_IMAGE $PROD_IMAGE
    - docker tag $CURRENT_IMAGE $STABLE_IMAGE
    - docker push $PROD_IMAGE
    - docker push $STABLE_IMAGE
  only:
    - tags
  except:
    - branches

release-prod-kpmg:
  stage: release
  variables:
    AWS_DEFAULT_REGION: "eu-west-2"
    KPMG_IMAGE_NAME: "ito_transit_bodp_django"
    IMAGE_TAG: ${CI_COMMIT_REF_NAME}
    KPMG_IMAGE: ${KPMG_REGISTRY_ADDRESS}/${KPMG_IMAGE_NAME}:${IMAGE_TAG}
    AWS_ACCESS_KEY_ID: ${KPMG_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${KPMG_AWS_SECRET_ACCESS_KEY}
  script:
    - echo $KPMG_IMAGE
    - docker pull $CURRENT_IMAGE
    - docker tag $CURRENT_IMAGE $KPMG_IMAGE
    - eval $(aws ecr get-login --no-include-email)
    - docker push $KPMG_IMAGE
  only:
    - tags
  except:
    - branches
