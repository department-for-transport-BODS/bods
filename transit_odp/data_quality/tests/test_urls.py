from typing import NamedTuple
from unittest.mock import patch

from django.conf import settings
from django.urls import resolve
from django.views import View
from django_hosts.resolvers import reverse

import pytest


pytestmark = pytest.mark.django_db
import config.hosts
# from transit_odp.data_quality import views

@pytest.fixture(autouse=True)
def client():
    from django.test import Client

    return Client()


# define named tuples for clarity about scenario format required by each test method
class UrlNameScenario(NamedTuple):
    url_path: str
    url_name: str
    view_kwargs: dict


class UrlResolvesViewScenario(NamedTuple):
    url_path: str
    view: View


# TODO: ideally use built in pytest functionality like parametrize -- didn't initially
# have much success combining
# class inheritance and parametrize, leading to the "scenarios" loop in the test methods
class DqUrlsTestBase:
    """
    Base class for testing Data Quality urls.

    Don't prefix with "Test" (e.g. TestDqUrlsBase) to ensure that pytest doesn't run
    this base class.

    Override the get_url_name_scenarios() and
    get_url_resolves_to_correct_view_scenarios() methods as needed. See
    WarningUrlsTestBase for an example.
    """

    # all DQ pages hang off /dataset/<pk>/
    dataset_id = 1
    org_id = 1
    report_id = 1
    url_segment = ""

    def test_url_name(self):
        """Test that the specified url name(s) correspond to the expected url path"""
        scenarios = self.get_url_name_scenarios()

        for scenario in scenarios:
            assert scenario.url_path in reverse(
                scenario.url_name,
                kwargs=scenario.view_kwargs,
                host=config.hosts.PUBLISH_HOST,
            )

    def test_url_resolves_to_correct_view(self,patched=None):
        """Test that list and detail url paths resolve to the expected views"""
        scenarios = self.get_url_resolves_to_correct_view_scenarios()

        for scenario in scenarios:
            resolver = resolve(scenario.url_path, urlconf=settings.PUBLISH_URLCONF)
            # "class-based views need to be compared by name, as the functions
            # generated by as_view() won't be equal"
            # https://docs.djangoproject.com/en/2.2/topics/testing/tools/
            # #django.test.Response.resolver_match
            assert resolver.func.__name__ == scenario.view.as_view().__name__

    def get_url_name_scenarios(self):
        raise NotImplementedError(
            "Method must be overriden with scenarios for your test"
        )

    def get_url_resolves_to_correct_view_scenarios(self,patched=None):
        raise NotImplementedError(
            "Method must be overriden with scenarios for your test"
        )

    def generate_dq_base_url_path(self):
        return (
            f"/org/{self.org_id}/dataset/timetable/{self.dataset_id}"
            f"/report/{self.report_id}/"
        )


class WarningUrlsTestBase(DqUrlsTestBase):
    """
    Base class for testing warnings that have a list and detail page.

    Don't prefix with "Test" (e.g. TestWarningUrlsBase) to ensure that pytest doesn't
    run this base class
    """

    warning_id = "90f6f112-14d6-4a8f-bca0-8ae891f9d184"  # generated using uuid.uuid4()
    list_url_name = ""
    list_view = None
    detail_url_name = ""
    detail_view = None

    def get_url_name_scenarios(self):
        return (
            UrlNameScenario(
                self.generate_list_url_path(),
                self.list_url_name,
                {
                    "pk": self.dataset_id,
                    "pk1": self.org_id,
                    "report_id": self.report_id,
                },
            ),
            UrlNameScenario(
                self.generate_detail_url_path(),
                self.detail_url_name,
                {
                    "pk": self.dataset_id,
                    "warning_pk": self.warning_id,
                    "pk1": self.org_id,
                    "report_id": self.report_id,
                },
            ),
        )

    def get_url_resolves_to_correct_view_scenarios(self):
        return (
            UrlResolvesViewScenario(self.generate_list_url_path(), self.list_view),
            UrlResolvesViewScenario(self.generate_detail_url_path(), self.detail_view),
        )

    # helper functions
    def generate_list_url_path(self):
        return f"{self.generate_dq_base_url_path()}{self.url_segment}/"

    def generate_detail_url_path(self):
        return f"{self.generate_list_url_path()}{self.warning_id}/"


class TestReportOverviewUrl(DqUrlsTestBase):
    url_segment = ""
    url_name = "dq:overview"

    def get_url_name_scenarios(self):
        return (
            UrlNameScenario(
                self.generate_dq_base_url_path(),
                self.url_name,
                {
                    "pk": self.dataset_id,
                    "pk1": self.org_id,
                    "report_id": self.report_id,
                },
            ),
        )

    @patch("waffle.flag_is_active", return_value=True)
    def get_url_resolves_to_correct_view_scenarios(self,patched=None):
        from transit_odp.data_quality.views import ReportOverviewView 
        return (UrlResolvesViewScenario(self.generate_dq_base_url_path(), ReportOverviewView),)


class TestGlossaryUrl(DqUrlsTestBase):
    url_segment = "glossary/"
    url_name = "dq:glossary"
    # view = DataQualityGlossaryView

    def get_url_name_scenarios(self):
        return (
            UrlNameScenario(
                f"{self.generate_dq_base_url_path()}{self.url_segment}",
                self.url_name,
                {
                    "pk": self.dataset_id,
                    "pk1": self.org_id,
                    "report_id": self.report_id,
                },
            ),
        )
    # @patch("waffle.flag_is_active", return_value=True)
    def get_url_resolves_to_correct_view_scenarios(self):
        from transit_odp.data_quality.views import DataQualityGlossaryView 
        return (
            UrlResolvesViewScenario(
                f"{self.generate_dq_base_url_path()}{self.url_segment}", DataQualityGlossaryView
            ),
        )


class TestFastTimingWarningUrls(WarningUrlsTestBase):
    url_segment = "fast-timings"
    list_url_name = "dq:fast-timings-list"
    # list_view = FastTimingListView
    detail_url_name = "dq:fast-timings-detail"
    # detail_view = FastTimingDetailView
    
    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import FastTimingListView, FastTimingDetailView
        self.list_view = FastTimingListView
        self.detail_view = FastTimingDetailView


class TestSlowTimingWarningUrls(WarningUrlsTestBase):
    url_segment = "slow-timings"
    list_url_name = "dq:slow-timings-list"
    detail_url_name = "dq:slow-timings-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def get_url_resolves_to_correct_view_scenarios(self,patched=None):
        from transit_odp.data_quality.views import SlowTimingsListView, SlowTimingsDetailView
        return (
            UrlResolvesViewScenario(self.generate_list_url_path(), SlowTimingsListView),
            UrlResolvesViewScenario(self.generate_detail_url_path(), SlowTimingsDetailView),
        )


class TestFastLinkWarningUrls(WarningUrlsTestBase):
    url_segment = "fast-links"
    list_url_name = "dq:fast-link-list"
    detail_url_name = "dq:fast-link-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import FastLinkListView, FastLinkDetailView
        self.list_view = FastLinkListView
        self.detail_view = FastLinkDetailView


class TestSlowLinkWarningUrls(WarningUrlsTestBase):
    url_segment = "slow-links"
    list_url_name = "dq:slow-link-list"
    detail_url_name = "dq:slow-link-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import SlowLinkListView, SlowLinkDetailView
        self.list_view = SlowLinkListView
        self.detail_view = SlowLinkDetailView


class TestDuplicateJourneyWarningUrls(WarningUrlsTestBase):
    url_segment = "duplicate-journeys"
    list_url_name = "dq:duplicate-journey-list"
    detail_url_name = "dq:duplicate-journey-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import DuplicateJourneyListView, DuplicateJourneyDetailView
        self.list_view = DuplicateJourneyListView
        self.detail_view = DuplicateJourneyDetailView


class TestBackwardTimingWarningUrls(WarningUrlsTestBase):
    url_segment = "backward-timing"
    list_url_name = "dq:backward-timing-list"
    detail_url_name = "dq:backward-timing-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import BackwardTimingListView, BackwardTimingDetailView
        self.list_view = BackwardTimingListView
        self.detail_view = BackwardTimingDetailView



class TestIncorrectNOCWarningUrls(WarningUrlsTestBase):
    url_segment = "incorrect-noc"
    list_url_name = "dq:incorrect-noc-list"
    detail_url_name = ""
    detail_view = None

    # Incorrect NOC warning only has list page (not detail page), so re-implement the
    # scenario methods
    def get_url_name_scenarios(self):
        return (
            UrlNameScenario(
                self.generate_list_url_path(),
                self.list_url_name,
                {
                    "pk": self.dataset_id,
                    "pk1": self.org_id,
                    "report_id": self.report_id,
                },
            ),
        )
    @patch("waffle.flag_is_active", return_value=True)
    def get_url_resolves_to_correct_view_scenarios(self,patched=None):
        from transit_odp.data_quality.views import IncorrectNOCListView
        return (UrlResolvesViewScenario(self.generate_list_url_path(), IncorrectNOCListView),)


class TestLastStopPickUpWarningUrls(WarningUrlsTestBase):
    url_segment = "pick-up-only"
    list_url_name = "dq:last-stop-pick-up-only-list"
    detail_url_name = "dq:last-stop-pick-up-only-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import LastStopPickUpListView, LastStopPickUpDetailView
        self.list_view = LastStopPickUpListView
        self.detail_view = LastStopPickUpDetailView


class TestFirstStopDropOffWarningUrls(WarningUrlsTestBase):
    url_segment = "drop-off-only"
    list_url_name = "dq:first-stop-set-down-only-list"
    detail_url_name = "dq:first-stop-set-down-only-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import FirstStopDropOffListView, FirstStopDropOffDetailView
        self.list_view = FirstStopDropOffListView
        self.detail_view = FirstStopDropOffDetailView


class TestLastStopNotTimingPointWarningUrls(WarningUrlsTestBase):
    url_segment = "last-stop-not-timing-point"
    list_url_name = "dq:last-stop-not-timing-point-list"
    detail_url_name = "dq:last-stop-not-timing-point-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import LastStopNotTimingListView, LastStopNotTimingDetailView
        self.list_view = LastStopNotTimingListView
        self.detail_view = LastStopNotTimingDetailView


class TestFirstStopNotTimingPointWarningUrls(WarningUrlsTestBase):
    url_segment = "first-stop-not-timing-point"
    list_url_name = "dq:first-stop-not-timing-point-list"
    detail_url_name = "dq:first-stop-not-timing-point-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import FirstStopNotTimingListView, FirstStopNotTimingDetailView
        self.list_view = FirstStopNotTimingListView
        self.detail_view = FirstStopNotTimingDetailView


class TestStopNotInNaptanWarningUrls(WarningUrlsTestBase):
    url_segment = "stop-not-in-naptan"
    list_url_name = "dq:stop-missing-naptan-list"
    detail_url_name = "dq:stop-missing-naptan-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import StopMissingNaptanListView, StopMissingNaptanDetailView
        self.list_view = StopMissingNaptanListView
        self.detail_view = StopMissingNaptanDetailView


class TestServiceLinkMissingStopWarningUrls(WarningUrlsTestBase):
    url_segment = "service-link-missing-stops"
    list_url_name = "dq:service-link-missing-stops-list"
    detail_url_name = "dq:service-link-missing-stops-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import ServiceLinkMissingStopListView, ServiceLinkMissingStopDetailView
        self.list_view = ServiceLinkMissingStopListView
        self.detail_view = ServiceLinkMissingStopDetailView


class TestStopRepeatedWarningUrls(WarningUrlsTestBase):
    url_segment = "multiple-stops"
    list_url_name = "dq:stop-repeated-list"
    detail_url_name = "dq:stop-repeated-detail"
    
    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import StopRepeatedListView, StopRepeatedDetailView
        self.list_view = StopRepeatedListView
        self.detail_view = StopRepeatedDetailView


class TestMissingStopWarningUrls(WarningUrlsTestBase):
    url_segment = "missing-stops"
    list_url_name = "dq:missing-stops-list"
    detail_url_name = "dq:missing-stops-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import MissingStopListView, MissingStopDetailView
        self.list_view = MissingStopListView
        self.detail_view = MissingStopDetailView


class TestJourneyOverlapWarningUrls(WarningUrlsTestBase):
    url_segment = "journey-overlap"
    list_url_name = "dq:journey-overlap-list"
    detail_url_name = "dq:journey-overlap-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import JourneyOverlapListView, JourneyOverlapDetailView
        self.list_view = JourneyOverlapListView
        self.detail_view = JourneyOverlapDetailView


class TestBackwardDateRangeWarningUrls(WarningUrlsTestBase):
    url_segment = "backward-date-range"
    list_url_name = "dq:backward-date-range-list"
    detail_url_name = "dq:backward-date-range-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import BackwardDateRangeListView, BackwardDateRangeDetailView
        self.list_view = BackwardDateRangeListView
        self.detail_view = BackwardDateRangeDetailView


class TestIncorrectStopTypeWarningUrls(WarningUrlsTestBase):
    url_segment = "incorrect-stop-type"
    list_url_name = "dq:incorrect-stop-type-list"
    detail_url_name = "dq:incorrect-stop-type-detail"

    @patch("waffle.flag_is_active", return_value=True)
    def __init__(self):
        from transit_odp.data_quality.views import IncorrectStopTypeListView, IncorrectStopTypeDetailView
        self.list_view = IncorrectStopTypeListView
        self.detail_view = IncorrectStopTypeDetailView