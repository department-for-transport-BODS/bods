# Generated by Django 2.2.5 on 2019-09-30 08:49

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [("naptan", "0001_initial"), ("organisation", "0001_initial")]

    operations = [
        migrations.CreateModel(
            name="ServiceLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("from_stop_atco", models.CharField(max_length=255)),
                ("to_stop_atco", models.CharField(max_length=255)),
                (
                    "from_stop",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="from_service_links",
                        to="naptan.StopPoint",
                    ),
                ),
                (
                    "to_stop",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="to_service_links",
                        to="naptan.StopPoint",
                    ),
                ),
            ],
            options={
                "ordering": ("from_stop_atco", "to_stop_atco"),
                "unique_together": {("from_stop_atco", "to_stop_atco")},
            },
        ),
        migrations.CreateModel(
            name="ServicePattern",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("service_pattern_id", models.CharField(max_length=255)),
                ("origin", models.CharField(max_length=255)),
                ("destination", models.CharField(max_length=255)),
                ("description", models.CharField(max_length=255)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.LineStringField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "admin_areas",
                    models.ManyToManyField(
                        related_name="service_patterns", to="naptan.AdminArea"
                    ),
                ),
                (
                    "localities",
                    models.ManyToManyField(
                        related_name="service_patterns", to="naptan.Locality"
                    ),
                ),
                (
                    "revision",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_patterns",
                        to="organisation.DatasetRevision",
                    ),
                ),
                (
                    "service_links",
                    models.ManyToManyField(
                        related_name="service_patterns", to="transmodel.ServiceLink"
                    ),
                ),
            ],
            options={"ordering": ("revision", "service_pattern_id")},
        ),
        migrations.CreateModel(
            name="ServicePatternStop",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sequence_number", models.IntegerField()),
                ("atco_code", models.CharField(max_length=255)),
                (
                    "naptan_stop",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_pattern_stops",
                        to="naptan.StopPoint",
                    ),
                ),
                (
                    "service_pattern",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_pattern_stops",
                        to="transmodel.ServicePattern",
                    ),
                ),
            ],
            options={"ordering": ("service_pattern", "sequence_number")},
        ),
        migrations.AddField(
            model_name="servicepattern",
            name="stops",
            field=models.ManyToManyField(
                through="transmodel.ServicePatternStop", to="naptan.StopPoint"
            ),
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("service_code", models.CharField(max_length=255)),
                ("name", models.CharField(blank=True, max_length=255)),
                (
                    "other_names",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "revision",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="organisation.DatasetRevision",
                    ),
                ),
                (
                    "service_patterns",
                    models.ManyToManyField(
                        related_name="services", to="transmodel.ServicePattern"
                    ),
                ),
            ],
            options={"ordering": ("revision", "service_code")},
        ),
        migrations.AlterUniqueTogether(
            name="servicepattern", unique_together={("revision", "service_pattern_id")}
        ),
    ]
