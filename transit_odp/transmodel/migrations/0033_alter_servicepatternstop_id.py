# Generated by Django 4.2.14 on 2024-12-03 02:48

from django.db import migrations


def alter_id_field(apps, schema_editor):
    # Skip changing the field type for 'id' in the model; manually alter the column type in SQL
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'transmodel_servicepatternstop' 
              AND column_name = 'id'
        """
        )
        result = cursor.fetchone()

        if result and result[1].lower() != "bigint":
            cursor.execute(
                "ALTER TABLE transmodel_servicepatternstop ALTER COLUMN id TYPE BIGINT"
            )


def alter_foreign_key(apps, schema_editor):
    # Alter the foreign key column to BIGINT if it's not already
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'dqs_observationresults' 
              AND column_name = 'service_pattern_stop_id'
        """
        )
        result = cursor.fetchone()

        if result and result[1].lower() != "bigint":
            cursor.execute(
                """
                SELECT constraint_name 
                FROM information_schema.table_constraints 
                WHERE table_name = 'dqs_observationresults' 
                  AND constraint_type = 'FOREIGN KEY'
            """
            )
            constraint = cursor.fetchone()

            if constraint:
                constraint_name = constraint[0]

                # Drop the existing foreign key constraint
                cursor.execute(
                    f"ALTER TABLE dqs_observationresults DROP CONSTRAINT {constraint_name}"
                )

                # Alter the foreign key column in the related table to BIGINT
                cursor.execute(
                    """
                    ALTER TABLE dqs_observationresults
                    ALTER COLUMN service_pattern_stop_id TYPE BIGINT
                """
                )

                # Recreate the foreign key constraint
                cursor.execute(
                    f"""
                    ALTER TABLE dqs_observationresults
                    ADD CONSTRAINT {constraint_name} FOREIGN KEY (service_pattern_stop_id) REFERENCES transmodel_servicepatternstop(id)
                """
                )


class Migration(migrations.Migration):

    dependencies = [
        ("transmodel", "0032_alter_tracksvehiclejourney_sequence_number_and_more"),
    ]

    operations = [
        migrations.RunPython(alter_id_field),
        migrations.RunPython(alter_foreign_key),
    ]
